package jetpack

const REGA = "r16" // 6502 Accumulator
const REGX = "r17" // 6502 X
const REGY = "r18" // 6502 Y
const REGZ = "r19" // Zero
const REGT = "r20" // Temp
const REGU = "r21" // Another Temp
const REGS = "r22" // AVR status register storage. for protecting the carry bit while we use it for pointer calculations.

const ADC_A = 0x6D
const ADC_X = 0x7D
const ADC_Y = 0x79
const ADC = 0x69
const AND = 0x29
const AND_A = 0x2d
const ASL = 0x0A
const BCC = 0x90
const BCS = 0xB0
const BEQ = 0xF0
const BIT = 0x2C
const BMI = 0x30
const BNE = 0xD0
const BPL = 0x10
const BRK = 0x00
const BVC = 0x50
const BVS = 0x70
const CLC = 0x18
const CLV = 0xB8
const CMP = 0xC9
const CMP_A = 0xCD
const CMP_X = 0xDD
const CPX = 0xE0
const CPY = 0xC0
const DEC_A = 0xce
const DEC_X = 0xde
const DEX = 0xCA
const DEY = 0x88
const EOR = 0x49
const INC_A = 0xee
const INC_X = 0xfe
const INX = 0xE8
const INY = 0xC8
const JMP = 0x4C
const JSR = 0x20
const LDA = 0xA9
const LDA_X = 0xbd
const LDA_Y = 0xB9
const LDA_A = 0xAD
const LDA_IY = 0xB1
const LDX = 0xA2
const LDX_A = 0xAE
const LDY = 0xA0
const LDY_A = 0xAC
const LDY_X = 0xBC
const LSR = 0x4a
const NOP = 0xea
const ORA = 0x09
const ORA_A = 0x0d
const PHA = 0x48
const PHP = 0x08
const PLA = 0x68
const PLP = 0x28
const RTI = 0x40
const RTS = 0x60
const ROR_A = 0x6e
const SEC = 0x38
const SBC_A = 0xed
const SBC = 0xe9
const SBC_X = 0xfd
const SBC_Y = 0xf9
const STA = 0x8D
const STX = 0x8E
const STY = 0x8C
const STA_X = 0x9D
const STA_Y = 0x99
const STA_Z = 0x85
const TAX = 0xAA
const TAY = 0xA8
const TYA = 0x98
const TXA = 0x8a

// map of op code to the number bytes used by this instruction (op code + address or immediate data)
var InstructionBytes = map[uint8]int{
	0x00: 1,0x01: 2,0x05: 2,0x06: 2,0x08: 1,0x09: 2,0x0A: 1,0x0D: 3,0x0E: 3,
	0x10: 2,0x11: 2,0x15: 2,0x16: 2,0x18: 1,0x19: 3,0x1D: 3,0x1E: 3,0x20: 3,
	0x21: 2,0x24: 2,0x25: 2,0x26: 2,0x28: 1,0x29: 2,0x2A: 1,0x2C: 3,0x2D: 3,
	0x2E: 3,0x30: 2,0x31: 2,0x35: 2,0x36: 2,0x38: 1,0x39: 3,0x3D: 3,0x3E: 3,
	0x40: 1,0x41: 2,0x45: 2,0x46: 2,0x48: 1,0x49: 2,0x4A: 1,0x4C: 3,0x4D: 3,
	0x4E: 3,0x50: 2,0x51: 2,0x55: 2,0x56: 2,0x58: 1,0x59: 3,0x5D: 3,0x5E: 3,
	0x60: 1,0x61: 2,0x65: 2,0x66: 2,0x68: 1,0x69: 2,0x6A: 1,0x6C: 3,0x6D: 3,
	0x6E: 3,0x70: 2,0x71: 2,0x75: 2,0x76: 2,0x78: 1,0x79: 3,0x7D: 3,0x7E: 3,
	0x84: 2,0x85: 2,0x86: 2,0x88: 1,0x8A: 1,0x8C: 3,0x8D: 3,0x8E: 3,0x90: 2,
	0x94: 2,0x95: 2,0x96: 2,0x98: 1,0x99: 3,0x9A: 1,0x9D: 3,0xA0: 2,0xA1: 2,
	0xA2: 2,0xA4: 2,0xA5: 2,0xA6: 2,0xA8: 1,0xA9: 2,0xAA: 1,0xAC: 3,0xAD: 3,
	0xAE: 3,0xB0: 2,0xB1: 2,0xB4: 2,0xB5: 2,0xB6: 2,0xB8: 1,0xB9: 3,0xBA: 1,
	0xBC: 3,0xBD: 3,0xBE: 3,0xC0: 2,0xC1: 2,0xC4: 2,0xC5: 2,0xC6: 2,0xC8: 1,
	0xC9: 2,0xCA: 1,0xCC: 3,0xCD: 3,0xCE: 3,0xD0: 2,0xD1: 2,0xD5: 2,0xD6: 2,
	0xD8: 1,0xD9: 3,0xDD: 3,0xDE: 3,0xE0: 2,0xE1: 2,0xE4: 2,0xE5: 2,0xE6: 2,
	0xE8: 1,0xE9: 2,0xEA: 1,0xEC: 3,0xED: 3,0xEE: 3,0xF0: 2,0xF1: 2,0xF5: 2,
	0xF6: 2,0xF8: 1,0xF9: 3,0xFD: 3,0xFE: 3}

// map of instructions which set the N and V flags
var InstructionsSetNV = map[uint8]bool{
	ADC_A: true,
	ADC_Y: true,
	ADC: true,
	AND_A: true,
	AND: true,
	ASL: true,
	CMP: true,
	CMP_A: true,
	CMP_X: true,
	LDA_A: true,
	LDA_IY: true,
	LDA_X: true,
	LDA_Y: true,
	LDA: true,
	LDX_A: true,
	LDX: true,
	LDY_X: true,
	LSR: true,
	ORA_A: true,
	ORA: true,
	ROR_A: true,
	SBC_A: true,
	SBC_Y:true,
	SBC: true,
	TAX: true,
	TAY: true,
	TXA: true,
	TYA: true,
}
