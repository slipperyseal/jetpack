package jetpack

var opcodes = []OpCode {
    {
        ins:    "ADC",
        mode:   "immediate",
        desc:   "Add Memory to Accumulator with Carry",
        action: "A + M + C -> A, C",
        flags:  0x07,
        code:   0x69,
        bytes:  2,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "ADC",
        mode:   "zeropage",
        desc:   "Add Memory to Accumulator with Carry",
        action: "A + M + C -> A, C",
        flags:  0x07,
        code:   0x65,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "ADC",
        mode:   "zeropage,X",
        desc:   "Add Memory to Accumulator with Carry",
        action: "A + M + C -> A, C",
        flags:  0x07,
        code:   0x75,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "ADC",
        mode:   "absolute",
        desc:   "Add Memory to Accumulator with Carry",
        action: "A + M + C -> A, C",
        flags:  0x07,
        code:   0x6D,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "ADC",
        mode:   "absolute,X",
        desc:   "Add Memory to Accumulator with Carry",
        action: "A + M + C -> A, C",
        flags:  0x07,
        code:   0x7D,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "ADC",
        mode:   "absolute,Y",
        desc:   "Add Memory to Accumulator with Carry",
        action: "A + M + C -> A, C",
        flags:  0x07,
        code:   0x79,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "ADC",
        mode:   "(indirect,X)",
        desc:   "Add Memory to Accumulator with Carry",
        action: "A + M + C -> A, C",
        flags:  0x07,
        code:   0x61,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "ADC",
        mode:   "(indirect),Y",
        desc:   "Add Memory to Accumulator with Carry",
        action: "A + M + C -> A, C",
        flags:  0x07,
        code:   0x71,
        bytes:  2,
        cycles: 5,
        extra:  1,
    },
    {
        ins:    "AND",
        mode:   "immediate",
        desc:   "AND Memory with Accumulator",
        action: "A AND M -> A",
        flags:  0x03,
        code:   0x29,
        bytes:  2,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "AND",
        mode:   "zeropage",
        desc:   "AND Memory with Accumulator",
        action: "A AND M -> A",
        flags:  0x03,
        code:   0x25,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "AND",
        mode:   "zeropage,X",
        desc:   "AND Memory with Accumulator",
        action: "A AND M -> A",
        flags:  0x03,
        code:   0x35,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "AND",
        mode:   "absolute",
        desc:   "AND Memory with Accumulator",
        action: "A AND M -> A",
        flags:  0x03,
        code:   0x2D,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "AND",
        mode:   "absolute,X",
        desc:   "AND Memory with Accumulator",
        action: "A AND M -> A",
        flags:  0x03,
        code:   0x3D,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "AND",
        mode:   "absolute,Y",
        desc:   "AND Memory with Accumulator",
        action: "A AND M -> A",
        flags:  0x03,
        code:   0x39,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "AND",
        mode:   "(indirect,X)",
        desc:   "AND Memory with Accumulator",
        action: "A AND M -> A",
        flags:  0x03,
        code:   0x21,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "AND",
        mode:   "(indirect),Y",
        desc:   "AND Memory with Accumulator",
        action: "A AND M -> A",
        flags:  0x03,
        code:   0x31,
        bytes:  2,
        cycles: 5,
        extra:  1,
    },
    {
        ins:    "ASL",
        mode:   "accumulator",
        desc:   "Shift Left One Bit (Memory or Accumulator)",
        action: "C <- [76543210] <- 0",
        flags:  0x07,
        code:   0x0A,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "ASL",
        mode:   "zeropage",
        desc:   "Shift Left One Bit (Memory or Accumulator)",
        action: "C <- [76543210] <- 0",
        flags:  0x07,
        code:   0x06,
        bytes:  2,
        cycles: 5,
        extra:  0,
    },
    {
        ins:    "ASL",
        mode:   "zeropage,X",
        desc:   "Shift Left One Bit (Memory or Accumulator)",
        action: "C <- [76543210] <- 0",
        flags:  0x07,
        code:   0x16,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "ASL",
        mode:   "absolute",
        desc:   "Shift Left One Bit (Memory or Accumulator)",
        action: "C <- [76543210] <- 0",
        flags:  0x07,
        code:   0x0E,
        bytes:  3,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "ASL",
        mode:   "absolute,X",
        desc:   "Shift Left One Bit (Memory or Accumulator)",
        action: "C <- [76543210] <- 0",
        flags:  0x07,
        code:   0x1E,
        bytes:  3,
        cycles: 7,
        extra:  0,
    },
    {
        ins:    "BCC",
        mode:   "relative",
        desc:   "Branch on Carry Clear",
        action: "branch on C = 0",
        flags:  0x00,
        code:   0x90,
        bytes:  2,
        cycles: 2,
        extra:  2,
    },
    {
        ins:    "BCS",
        mode:   "relative",
        desc:   "Branch on Carry Set",
        action: "branch on C = 1",
        flags:  0x00,
        code:   0xB0,
        bytes:  2,
        cycles: 2,
        extra:  2,
    },
    {
        ins:    "BEQ",
        mode:   "relative",
        desc:   "Branch on Result Zero",
        action: "branch on Z = 1",
        flags:  0x00,
        code:   0xF0,
        bytes:  2,
        cycles: 2,
        extra:  2,
    },
    {
        ins:    "BIT",
        mode:   "zeropage",
        desc:   "Test Bits in Memory with Accumulator",
        action: "A AND M, M7 -> N, M6 -> V",
        flags:  0x03,
        code:   0x24,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "BIT",
        mode:   "absolute",
        desc:   "Test Bits in Memory with Accumulator",
        action: "A AND M, M7 -> N, M6 -> V",
        flags:  0x03,
        code:   0x2C,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "BMI",
        mode:   "relative",
        desc:   "Branch on Result Minus",
        action: "branch on N = 1",
        flags:  0x00,
        code:   0x30,
        bytes:  2,
        cycles: 2,
        extra:  2,
    },
    {
        ins:    "BNE",
        mode:   "relative",
        desc:   "Branch on Result not Zero",
        action: "branch on Z = 0",
        flags:  0x00,
        code:   0xD0,
        bytes:  2,
        cycles: 2,
        extra:  2,
    },
    {
        ins:    "BPL",
        mode:   "relative",
        desc:   "Branch on Result Plus",
        action: "branch on N = 0",
        flags:  0x00,
        code:   0x10,
        bytes:  2,
        cycles: 2,
        extra:  2,
    },
    {
        ins:    "BRK",
        mode:   "implied",
        desc:   "Force Break",
        action: "interrupt, push PC+2, push SR",
        flags:  0x08,
        code:   0x00,
        bytes:  1,
        cycles: 7,
        extra:  0,
    },
    {
        ins:    "BVC",
        mode:   "relative",
        desc:   "Branch on Overflow Clear",
        action: "branch on V = 0",
        flags:  0x00,
        code:   0x50,
        bytes:  2,
        cycles: 2,
        extra:  2,
    },
    {
        ins:    "BVS",
        mode:   "relative",
        desc:   "Branch on Overflow Set",
        action: "branch on V = 1",
        flags:  0x00,
        code:   0x70,
        bytes:  2,
        cycles: 2,
        extra:  2,
    },
    {
        ins:    "CLC",
        mode:   "implied",
        desc:   "Clear Carry Flag",
        action: "0 -> C",
        flags:  0x04,
        code:   0x18,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "CLD",
        mode:   "implied",
        desc:   "Clear Decimal Mode",
        action: "0 -> D",
        flags:  0x10,
        code:   0xD8,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "CLI",
        mode:   "implied",
        desc:   "Clear Interrupt Disable Bit",
        action: "0 -> I",
        flags:  0x08,
        code:   0x58,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "CLV",
        mode:   "implied",
        desc:   "Clear Overflow Flag",
        action: "0 -> V",
        flags:  0x00,
        code:   0xB8,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "CMP",
        mode:   "immediate",
        desc:   "Compare Memory with Accumulator",
        action: "A - M",
        flags:  0x07,
        code:   0xC9,
        bytes:  2,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "CMP",
        mode:   "zeropage",
        desc:   "Compare Memory with Accumulator",
        action: "A - M",
        flags:  0x07,
        code:   0xC5,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "CMP",
        mode:   "zeropage,X",
        desc:   "Compare Memory with Accumulator",
        action: "A - M",
        flags:  0x07,
        code:   0xD5,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "CMP",
        mode:   "absolute",
        desc:   "Compare Memory with Accumulator",
        action: "A - M",
        flags:  0x07,
        code:   0xCD,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "CMP",
        mode:   "absolute,X",
        desc:   "Compare Memory with Accumulator",
        action: "A - M",
        flags:  0x07,
        code:   0xDD,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "CMP",
        mode:   "absolute,Y",
        desc:   "Compare Memory with Accumulator",
        action: "A - M",
        flags:  0x07,
        code:   0xD9,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "CMP",
        mode:   "(indirect,X)",
        desc:   "Compare Memory with Accumulator",
        action: "A - M",
        flags:  0x07,
        code:   0xC1,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "CMP",
        mode:   "(indirect),Y",
        desc:   "Compare Memory with Accumulator",
        action: "A - M",
        flags:  0x07,
        code:   0xD1,
        bytes:  2,
        cycles: 5,
        extra:  1,
    },
    {
        ins:    "CPX",
        mode:   "immediate",
        desc:   "Compare Memory and Index X",
        action: "X - M",
        flags:  0x07,
        code:   0xE0,
        bytes:  2,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "CPX",
        mode:   "zeropage",
        desc:   "Compare Memory and Index X",
        action: "X - M",
        flags:  0x07,
        code:   0xE4,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "CPX",
        mode:   "absolute",
        desc:   "Compare Memory and Index X",
        action: "X - M",
        flags:  0x07,
        code:   0xEC,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "CPY",
        mode:   "immediate",
        desc:   "Compare Memory and Index Y",
        action: "Y - M",
        flags:  0x07,
        code:   0xC0,
        bytes:  2,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "CPY",
        mode:   "zeropage",
        desc:   "Compare Memory and Index Y",
        action: "Y - M",
        flags:  0x07,
        code:   0xC4,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "CPY",
        mode:   "absolute",
        desc:   "Compare Memory and Index Y",
        action: "Y - M",
        flags:  0x07,
        code:   0xCC,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "DEC",
        mode:   "zeropage",
        desc:   "Decrement Memory by One",
        action: "M - 1 -> M",
        flags:  0x03,
        code:   0xC6,
        bytes:  2,
        cycles: 5,
        extra:  0,
    },
    {
        ins:    "DEC",
        mode:   "zeropage,X",
        desc:   "Decrement Memory by One",
        action: "M - 1 -> M",
        flags:  0x03,
        code:   0xD6,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "DEC",
        mode:   "absolute",
        desc:   "Decrement Memory by One",
        action: "M - 1 -> M",
        flags:  0x03,
        code:   0xCE,
        bytes:  3,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "DEC",
        mode:   "absolute,X",
        desc:   "Decrement Memory by One",
        action: "M - 1 -> M",
        flags:  0x03,
        code:   0xDE,
        bytes:  3,
        cycles: 7,
        extra:  0,
    },
    {
        ins:    "DEX",
        mode:   "implied",
        desc:   "Decrement Index X by One",
        action: "X - 1 -> X",
        flags:  0x03,
        code:   0xCA,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "DEY",
        mode:   "implied",
        desc:   "Decrement Index Y by One",
        action: "Y - 1 -> Y",
        flags:  0x03,
        code:   0x88,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "EOR",
        mode:   "immediate",
        desc:   "Exclusive-OR Memory with Accumulator",
        action: "A EOR M -> A",
        flags:  0x03,
        code:   0x49,
        bytes:  2,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "EOR",
        mode:   "zeropage",
        desc:   "Exclusive-OR Memory with Accumulator",
        action: "A EOR M -> A",
        flags:  0x03,
        code:   0x45,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "EOR",
        mode:   "zeropage,X",
        desc:   "Exclusive-OR Memory with Accumulator",
        action: "A EOR M -> A",
        flags:  0x03,
        code:   0x55,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "EOR",
        mode:   "absolute",
        desc:   "Exclusive-OR Memory with Accumulator",
        action: "A EOR M -> A",
        flags:  0x03,
        code:   0x4D,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "EOR",
        mode:   "absolute,X",
        desc:   "Exclusive-OR Memory with Accumulator",
        action: "A EOR M -> A",
        flags:  0x03,
        code:   0x5D,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "EOR",
        mode:   "absolute,Y",
        desc:   "Exclusive-OR Memory with Accumulator",
        action: "A EOR M -> A",
        flags:  0x03,
        code:   0x59,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "EOR",
        mode:   "(indirect,X)",
        desc:   "Exclusive-OR Memory with Accumulator",
        action: "A EOR M -> A",
        flags:  0x03,
        code:   0x41,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "EOR",
        mode:   "(indirect),Y",
        desc:   "Exclusive-OR Memory with Accumulator",
        action: "A EOR M -> A",
        flags:  0x03,
        code:   0x51,
        bytes:  2,
        cycles: 5,
        extra:  1,
    },
    {
        ins:    "INC",
        mode:   "zeropage",
        desc:   "Increment Memory by One",
        action: "M + 1 -> M",
        flags:  0x03,
        code:   0xE6,
        bytes:  2,
        cycles: 5,
        extra:  0,
    },
    {
        ins:    "INC",
        mode:   "zeropage,X",
        desc:   "Increment Memory by One",
        action: "M + 1 -> M",
        flags:  0x03,
        code:   0xF6,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "INC",
        mode:   "absolute",
        desc:   "Increment Memory by One",
        action: "M + 1 -> M",
        flags:  0x03,
        code:   0xEE,
        bytes:  3,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "INC",
        mode:   "absolute,X",
        desc:   "Increment Memory by One",
        action: "M + 1 -> M",
        flags:  0x03,
        code:   0xFE,
        bytes:  3,
        cycles: 7,
        extra:  0,
    },
    {
        ins:    "INX",
        mode:   "implied",
        desc:   "Increment Index X by One",
        action: "X + 1 -> X",
        flags:  0x03,
        code:   0xE8,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "INY",
        mode:   "implied",
        desc:   "Increment Index Y by One",
        action: "Y + 1 -> Y",
        flags:  0x03,
        code:   0xC8,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "JMP",
        mode:   "absolute",
        desc:   "Jump to New Location",
        action: "(PC+1) -> PCL, (PC+2) -> PCH",
        flags:  0x00,
        code:   0x4C,
        bytes:  3,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "JMP",
        mode:   "indirect",
        desc:   "Jump to New Location",
        action: "(PC+1) -> PCL, (PC+2) -> PCH",
        flags:  0x00,
        code:   0x6C,
        bytes:  3,
        cycles: 5,
        extra:  0,
    },
    {
        ins:    "JSR",
        mode:   "absolute",
        desc:   "Jump to New Location Saving Return Address",
        action: "push (PC+2), (PC+1) -> PCL, (PC+2) -> PCH",
        flags:  0x00,
        code:   0x20,
        bytes:  3,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "LDA",
        mode:   "immediate",
        desc:   "Load Accumulator with Memory",
        action: "M -> A",
        flags:  0x03,
        code:   0xA9,
        bytes:  2,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "LDA",
        mode:   "zeropage",
        desc:   "Load Accumulator with Memory",
        action: "M -> A",
        flags:  0x03,
        code:   0xA5,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "LDA",
        mode:   "zeropage,X",
        desc:   "Load Accumulator with Memory",
        action: "M -> A",
        flags:  0x03,
        code:   0xB5,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "LDA",
        mode:   "absolute",
        desc:   "Load Accumulator with Memory",
        action: "M -> A",
        flags:  0x03,
        code:   0xAD,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "LDA",
        mode:   "absolute,X",
        desc:   "Load Accumulator with Memory",
        action: "M -> A",
        flags:  0x03,
        code:   0xBD,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "LDA",
        mode:   "absolute,Y",
        desc:   "Load Accumulator with Memory",
        action: "M -> A",
        flags:  0x03,
        code:   0xB9,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "LDA",
        mode:   "(indirect,X)",
        desc:   "Load Accumulator with Memory",
        action: "M -> A",
        flags:  0x03,
        code:   0xA1,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "LDA",
        mode:   "(indirect),Y",
        desc:   "Load Accumulator with Memory",
        action: "M -> A",
        flags:  0x03,
        code:   0xB1,
        bytes:  2,
        cycles: 5,
        extra:  1,
    },
    {
        ins:    "LDX",
        mode:   "immediate",
        desc:   "Load Index X with Memory",
        action: "M -> X",
        flags:  0x03,
        code:   0xA2,
        bytes:  2,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "LDX",
        mode:   "zeropage",
        desc:   "Load Index X with Memory",
        action: "M -> X",
        flags:  0x03,
        code:   0xA6,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "LDX",
        mode:   "zeropage,Y",
        desc:   "Load Index X with Memory",
        action: "M -> X",
        flags:  0x03,
        code:   0xB6,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "LDX",
        mode:   "absolute",
        desc:   "Load Index X with Memory",
        action: "M -> X",
        flags:  0x03,
        code:   0xAE,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "LDX",
        mode:   "absolute,Y",
        desc:   "Load Index X with Memory",
        action: "M -> X",
        flags:  0x03,
        code:   0xBE,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "LDY",
        mode:   "immediate",
        desc:   "Load Index Y with Memory",
        action: "M -> Y",
        flags:  0x03,
        code:   0xA0,
        bytes:  2,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "LDY",
        mode:   "zeropage",
        desc:   "Load Index Y with Memory",
        action: "M -> Y",
        flags:  0x03,
        code:   0xA4,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "LDY",
        mode:   "zeropage,X",
        desc:   "Load Index Y with Memory",
        action: "M -> Y",
        flags:  0x03,
        code:   0xB4,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "LDY",
        mode:   "absolute",
        desc:   "Load Index Y with Memory",
        action: "M -> Y",
        flags:  0x03,
        code:   0xAC,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "LDY",
        mode:   "absolute,X",
        desc:   "Load Index Y with Memory",
        action: "M -> Y",
        flags:  0x03,
        code:   0xBC,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "LSR",
        mode:   "accumulator",
        desc:   "Shift One Bit Right (Memory or Accumulator)",
        action: "0 -> [76543210] -> C",
        flags:  0x07,
        code:   0x4A,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "LSR",
        mode:   "zeropage",
        desc:   "Shift One Bit Right (Memory or Accumulator)",
        action: "0 -> [76543210] -> C",
        flags:  0x07,
        code:   0x46,
        bytes:  2,
        cycles: 5,
        extra:  0,
    },
    {
        ins:    "LSR",
        mode:   "zeropage,X",
        desc:   "Shift One Bit Right (Memory or Accumulator)",
        action: "0 -> [76543210] -> C",
        flags:  0x07,
        code:   0x56,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "LSR",
        mode:   "absolute",
        desc:   "Shift One Bit Right (Memory or Accumulator)",
        action: "0 -> [76543210] -> C",
        flags:  0x07,
        code:   0x4E,
        bytes:  3,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "LSR",
        mode:   "absolute,X",
        desc:   "Shift One Bit Right (Memory or Accumulator)",
        action: "0 -> [76543210] -> C",
        flags:  0x07,
        code:   0x5E,
        bytes:  3,
        cycles: 7,
        extra:  0,
    },
    {
        ins:    "NOP",
        mode:   "implied",
        desc:   "No Operation",
        action: "No Operation",
        flags:  0x00,
        code:   0xEA,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "ORA",
        mode:   "immediate",
        desc:   "OR Memory with Accumulator",
        action: "A OR M -> A",
        flags:  0x03,
        code:   0x09,
        bytes:  2,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "ORA",
        mode:   "zeropage",
        desc:   "OR Memory with Accumulator",
        action: "A OR M -> A",
        flags:  0x03,
        code:   0x05,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "ORA",
        mode:   "zeropage,X",
        desc:   "OR Memory with Accumulator",
        action: "A OR M -> A",
        flags:  0x03,
        code:   0x15,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "ORA",
        mode:   "absolute",
        desc:   "OR Memory with Accumulator",
        action: "A OR M -> A",
        flags:  0x03,
        code:   0x0D,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "ORA",
        mode:   "absolute,X",
        desc:   "OR Memory with Accumulator",
        action: "A OR M -> A",
        flags:  0x03,
        code:   0x1D,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "ORA",
        mode:   "absolute,Y",
        desc:   "OR Memory with Accumulator",
        action: "A OR M -> A",
        flags:  0x03,
        code:   0x19,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "ORA",
        mode:   "(indirect,X)",
        desc:   "OR Memory with Accumulator",
        action: "A OR M -> A",
        flags:  0x03,
        code:   0x01,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "ORA",
        mode:   "(indirect),Y",
        desc:   "OR Memory with Accumulator",
        action: "A OR M -> A",
        flags:  0x03,
        code:   0x11,
        bytes:  2,
        cycles: 5,
        extra:  1,
    },
    {
        ins:    "PHA",
        mode:   "implied",
        desc:   "Push Accumulator on Stack",
        action: "push A",
        flags:  0x00,
        code:   0x48,
        bytes:  1,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "PHP",
        mode:   "implied",
        desc:   "Push Processor Status on Stack",
        action: "push SR",
        flags:  0x00,
        code:   0x08,
        bytes:  1,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "PLA",
        mode:   "implied",
        desc:   "Pull Accumulator from Stack",
        action: "pull A",
        flags:  0x03,
        code:   0x68,
        bytes:  1,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "PLP",
        mode:   "implied",
        desc:   "Pull Processor Status from Stack",
        action: "pull SR",
        flags:  0x1f,
        code:   0x28,
        bytes:  1,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "ROL",
        mode:   "accumulator",
        desc:   "Rotate One Bit Left (Memory or Accumulator)",
        action: "C <- [76543210] <- C",
        flags:  0x07,
        code:   0x2A,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "ROL",
        mode:   "zeropage",
        desc:   "Rotate One Bit Left (Memory or Accumulator)",
        action: "C <- [76543210] <- C",
        flags:  0x07,
        code:   0x26,
        bytes:  2,
        cycles: 5,
        extra:  0,
    },
    {
        ins:    "ROL",
        mode:   "zeropage,X",
        desc:   "Rotate One Bit Left (Memory or Accumulator)",
        action: "C <- [76543210] <- C",
        flags:  0x07,
        code:   0x36,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "ROL",
        mode:   "absolute",
        desc:   "Rotate One Bit Left (Memory or Accumulator)",
        action: "C <- [76543210] <- C",
        flags:  0x07,
        code:   0x2E,
        bytes:  3,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "ROL",
        mode:   "absolute,X",
        desc:   "Rotate One Bit Left (Memory or Accumulator)",
        action: "C <- [76543210] <- C",
        flags:  0x07,
        code:   0x3E,
        bytes:  3,
        cycles: 7,
        extra:  0,
    },
    {
        ins:    "ROR",
        mode:   "accumulator",
        desc:   "Rotate One Bit Right (Memory or Accumulator)",
        action: "C -> [76543210] -> C",
        flags:  0x07,
        code:   0x6A,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "ROR",
        mode:   "zeropage",
        desc:   "Rotate One Bit Right (Memory or Accumulator)",
        action: "C -> [76543210] -> C",
        flags:  0x07,
        code:   0x66,
        bytes:  2,
        cycles: 5,
        extra:  0,
    },
    {
        ins:    "ROR",
        mode:   "zeropage,X",
        desc:   "Rotate One Bit Right (Memory or Accumulator)",
        action: "C -> [76543210] -> C",
        flags:  0x07,
        code:   0x76,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "ROR",
        mode:   "absolute",
        desc:   "Rotate One Bit Right (Memory or Accumulator)",
        action: "C -> [76543210] -> C",
        flags:  0x07,
        code:   0x6E,
        bytes:  3,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "ROR",
        mode:   "absolute,X",
        desc:   "Rotate One Bit Right (Memory or Accumulator)",
        action: "C -> [76543210] -> C",
        flags:  0x07,
        code:   0x7E,
        bytes:  3,
        cycles: 7,
        extra:  0,
    },
    {
        ins:    "RTI",
        mode:   "implied",
        desc:   "Return from Interrupt",
        action: "pull SR, pull PC",
        flags:  0x1f,
        code:   0x40,
        bytes:  1,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "RTS",
        mode:   "implied",
        desc:   "Return from Subroutine",
        action: "pull PC, PC+1 -> PC",
        flags:  0x00,
        code:   0x60,
        bytes:  1,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "SBC",
        mode:   "immediate",
        desc:   "Subtract Memory from Accumulator with Borrow",
        action: "A - M - C -> A",
        flags:  0x07,
        code:   0xE9,
        bytes:  2,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "SBC",
        mode:   "zeropage",
        desc:   "Subtract Memory from Accumulator with Borrow",
        action: "A - M - C -> A",
        flags:  0x07,
        code:   0xE5,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "SBC",
        mode:   "zeropage,X",
        desc:   "Subtract Memory from Accumulator with Borrow",
        action: "A - M - C -> A",
        flags:  0x07,
        code:   0xF5,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "SBC",
        mode:   "absolute",
        desc:   "Subtract Memory from Accumulator with Borrow",
        action: "A - M - C -> A",
        flags:  0x07,
        code:   0xED,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "SBC",
        mode:   "absolute,X",
        desc:   "Subtract Memory from Accumulator with Borrow",
        action: "A - M - C -> A",
        flags:  0x07,
        code:   0xFD,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "SBC",
        mode:   "absolute,Y",
        desc:   "Subtract Memory from Accumulator with Borrow",
        action: "A - M - C -> A",
        flags:  0x07,
        code:   0xF9,
        bytes:  3,
        cycles: 4,
        extra:  1,
    },
    {
        ins:    "SBC",
        mode:   "(indirect,X)",
        desc:   "Subtract Memory from Accumulator with Borrow",
        action: "A - M - C -> A",
        flags:  0x07,
        code:   0xE1,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "SBC",
        mode:   "(indirect),Y",
        desc:   "Subtract Memory from Accumulator with Borrow",
        action: "A - M - C -> A",
        flags:  0x07,
        code:   0xF1,
        bytes:  2,
        cycles: 5,
        extra:  1,
    },
    {
        ins:    "SEC",
        mode:   "implied",
        desc:   "Set Carry Flag",
        action: "1 -> C",
        flags:  0x04,
        code:   0x38,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "SED",
        mode:   "implied",
        desc:   "Set Decimal Flag",
        action: "1 -> D",
        flags:  0x10,
        code:   0xF8,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "SEI",
        mode:   "implied",
        desc:   "Set Interrupt Disable Status",
        action: "1 -> I",
        flags:  0x08,
        code:   0x78,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "STA",
        mode:   "zeropage",
        desc:   "Store Accumulator in Memory",
        action: "A -> M",
        flags:  0x00,
        code:   0x85,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "STA",
        mode:   "zeropage,X",
        desc:   "Store Accumulator in Memory",
        action: "A -> M",
        flags:  0x00,
        code:   0x95,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "STA",
        mode:   "absolute",
        desc:   "Store Accumulator in Memory",
        action: "A -> M",
        flags:  0x00,
        code:   0x8D,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "STA",
        mode:   "absolute,X",
        desc:   "Store Accumulator in Memory",
        action: "A -> M",
        flags:  0x00,
        code:   0x9D,
        bytes:  3,
        cycles: 5,
        extra:  0,
    },
    {
        ins:    "STA",
        mode:   "absolute,Y",
        desc:   "Store Accumulator in Memory",
        action: "A -> M",
        flags:  0x00,
        code:   0x99,
        bytes:  3,
        cycles: 5,
        extra:  0,
    },
    {
        ins:    "STA",
        mode:   "(indirect,X)",
        desc:   "Store Accumulator in Memory",
        action: "A -> M",
        flags:  0x00,
        code:   0x81,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "STA",
        mode:   "(indirect),Y",
        desc:   "Store Accumulator in Memory",
        action: "A -> M",
        flags:  0x00,
        code:   0x91,
        bytes:  2,
        cycles: 6,
        extra:  0,
    },
    {
        ins:    "STX",
        mode:   "zeropage",
        desc:   "Store Index X in Memory",
        action: "X -> M",
        flags:  0x00,
        code:   0x86,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "STX",
        mode:   "zeropage,Y",
        desc:   "Store Index X in Memory",
        action: "X -> M",
        flags:  0x00,
        code:   0x96,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "STX",
        mode:   "absolute",
        desc:   "Store Index X in Memory",
        action: "X -> M",
        flags:  0x00,
        code:   0x8E,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "STY",
        mode:   "zeropage",
        desc:   "Sore Index Y in Memory",
        action: "Y -> M",
        flags:  0x00,
        code:   0x84,
        bytes:  2,
        cycles: 3,
        extra:  0,
    },
    {
        ins:    "STY",
        mode:   "zeropage,X",
        desc:   "Sore Index Y in Memory",
        action: "Y -> M",
        flags:  0x00,
        code:   0x94,
        bytes:  2,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "STY",
        mode:   "absolute",
        desc:   "Sore Index Y in Memory",
        action: "Y -> M",
        flags:  0x00,
        code:   0x8C,
        bytes:  3,
        cycles: 4,
        extra:  0,
    },
    {
        ins:    "TAX",
        mode:   "implied",
        desc:   "Transfer Accumulator to Index X",
        action: "A -> X",
        flags:  0x03,
        code:   0xAA,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "TAY",
        mode:   "implied",
        desc:   "Transfer Accumulator to Index Y",
        action: "A -> Y",
        flags:  0x03,
        code:   0xA8,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "TSX",
        mode:   "implied",
        desc:   "Transfer Stack Pointer to Index X",
        action: "SP -> X",
        flags:  0x03,
        code:   0xBA,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "TXA",
        mode:   "implied",
        desc:   "Transfer Index X to Accumulator",
        action: "X -> A",
        flags:  0x03,
        code:   0x8A,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "TXS",
        mode:   "implied",
        desc:   "Transfer Index X to Stack Register",
        action: "X -> SP",
        flags:  0x00,
        code:   0x9A,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
    {
        ins:    "TYA",
        mode:   "implied",
        desc:   "Transfer Index Y to Accumulator",
        action: "Y -> A",
        flags:  0x03,
        code:   0x98,
        bytes:  1,
        cycles: 2,
        extra:  0,
    },
}

const ADC = 0x69
const ADC_Z = 0x65
const ADC_ZX = 0x75
const ADC_A = 0x6D
const ADC_AX = 0x7D
const ADC_AY = 0x79
const ADC_IX = 0x61
const ADC_IY = 0x71
const AND = 0x29
const AND_Z = 0x25
const AND_ZX = 0x35
const AND_A = 0x2D
const AND_AX = 0x3D
const AND_AY = 0x39
const AND_IX = 0x21
const AND_IY = 0x31
const ASL = 0x0A
const ASL_Z = 0x06
const ASL_ZX = 0x16
const ASL_A = 0x0E
const ASL_AX = 0x1E
const BCC = 0x90
const BCS = 0xB0
const BEQ = 0xF0
const BIT_Z = 0x24
const BIT_A = 0x2C
const BMI = 0x30
const BNE = 0xD0
const BPL = 0x10
const BRK = 0x00
const BVC = 0x50
const BVS = 0x70
const CLC = 0x18
const CLD = 0xD8
const CLI = 0x58
const CLV = 0xB8
const CMP = 0xC9
const CMP_Z = 0xC5
const CMP_ZX = 0xD5
const CMP_A = 0xCD
const CMP_AX = 0xDD
const CMP_AY = 0xD9
const CMP_IX = 0xC1
const CMP_IY = 0xD1
const CPX = 0xE0
const CPX_Z = 0xE4
const CPX_A = 0xEC
const CPY = 0xC0
const CPY_Z = 0xC4
const CPY_A = 0xCC
const DEC_Z = 0xC6
const DEC_ZX = 0xD6
const DEC_A = 0xCE
const DEC_AX = 0xDE
const DEX = 0xCA
const DEY = 0x88
const EOR = 0x49
const EOR_Z = 0x45
const EOR_ZX = 0x55
const EOR_A = 0x4D
const EOR_AX = 0x5D
const EOR_AY = 0x59
const EOR_IX = 0x41
const EOR_IY = 0x51
const INC_Z = 0xE6
const INC_ZX = 0xF6
const INC_A = 0xEE
const INC_AX = 0xFE
const INX = 0xE8
const INY = 0xC8
const JMP_A = 0x4C
const JMP_I = 0x6C
const JSR_A = 0x20
const LDA = 0xA9
const LDA_Z = 0xA5
const LDA_ZX = 0xB5
const LDA_A = 0xAD
const LDA_AX = 0xBD
const LDA_AY = 0xB9
const LDA_IX = 0xA1
const LDA_IY = 0xB1
const LDX = 0xA2
const LDX_Z = 0xA6
const LDX_ZY = 0xB6
const LDX_A = 0xAE
const LDX_AY = 0xBE
const LDY = 0xA0
const LDY_Z = 0xA4
const LDY_ZX = 0xB4
const LDY_A = 0xAC
const LDY_AX = 0xBC
const LSR = 0x4A
const LSR_Z = 0x46
const LSR_ZX = 0x56
const LSR_A = 0x4E
const LSR_AX = 0x5E
const NOP = 0xEA
const ORA = 0x09
const ORA_Z = 0x05
const ORA_ZX = 0x15
const ORA_A = 0x0D
const ORA_AX = 0x1D
const ORA_AY = 0x19
const ORA_IX = 0x01
const ORA_IY = 0x11
const PHA = 0x48
const PHP = 0x08
const PLA = 0x68
const PLP = 0x28
const ROL = 0x2A
const ROL_Z = 0x26
const ROL_ZX = 0x36
const ROL_A = 0x2E
const ROL_AX = 0x3E
const ROR = 0x6A
const ROR_Z = 0x66
const ROR_ZX = 0x76
const ROR_A = 0x6E
const ROR_AX = 0x7E
const RTI = 0x40
const RTS = 0x60
const SBC = 0xE9
const SBC_Z = 0xE5
const SBC_ZX = 0xF5
const SBC_A = 0xED
const SBC_AX = 0xFD
const SBC_AY = 0xF9
const SBC_IX = 0xE1
const SBC_IY = 0xF1
const SEC = 0x38
const SED = 0xF8
const SEI = 0x78
const STA_Z = 0x85
const STA_ZX = 0x95
const STA_A = 0x8D
const STA_AX = 0x9D
const STA_AY = 0x99
const STA_IX = 0x81
const STA_IY = 0x91
const STX_Z = 0x86
const STX_ZY = 0x96
const STX_A = 0x8E
const STY_Z = 0x84
const STY_ZX = 0x94
const STY_A = 0x8C
const TAX = 0xAA
const TAY = 0xA8
const TSX = 0xBA
const TXA = 0x8A
const TXS = 0x9A
const TYA = 0x98

